// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/CatInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CatInfo {

  /// <summary>Holder for reflection information generated from proto/CatInfo.proto</summary>
  public static partial class CatInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/CatInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CatInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNwcm90by9DYXRJbmZvLnByb3RvEgdDYXRJbmZvIrsBCgdDYXRJbmZvEjIK",
            "CmNhdF9jb25maWcYASADKAsyHi5DYXRJbmZvLkNhdEluZm8uQ2F0SXRlbUNv",
            "bmZpZxp8Cg1DYXRJdGVtQ29uZmlnEgoKAmlkGAEgASgDEgwKBG5hbWUYAiAB",
            "KAkSDAoEdHlwZRgDIAEoCRINCgVpbWFnZRgEIAEoCRIQCghwcm9wZXJ0eRgF",
            "IAMoBRINCgVza2lsbBgGIAEoAxITCgtkZXNjcmlwdGlvbhgHIAEoCWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CatInfo.CatInfo), global::CatInfo.CatInfo.Parser, new[]{ "CatConfig" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CatInfo.CatInfo.Types.CatItemConfig), global::CatInfo.CatInfo.Types.CatItemConfig.Parser, new[]{ "Id", "Name", "Type", "Image", "Property", "Skill", "Description" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// @wrapper 猫咪信息表(CatInfo.pb.json)
  /// </summary>
  public sealed partial class CatInfo : pb::IMessage<CatInfo> {
    private static readonly pb::MessageParser<CatInfo> _parser = new pb::MessageParser<CatInfo>(() => new CatInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CatInfo.CatInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatInfo(CatInfo other) : this() {
      catConfig_ = other.catConfig_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatInfo Clone() {
      return new CatInfo(this);
    }

    /// <summary>Field number for the "cat_config" field.</summary>
    public const int CatConfigFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CatInfo.CatInfo.Types.CatItemConfig> _repeated_catConfig_codec
        = pb::FieldCodec.ForMessage(10, global::CatInfo.CatInfo.Types.CatItemConfig.Parser);
    private readonly pbc::RepeatedField<global::CatInfo.CatInfo.Types.CatItemConfig> catConfig_ = new pbc::RepeatedField<global::CatInfo.CatInfo.Types.CatItemConfig>();
    /// <summary>
    /// @name 猫咪信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CatInfo.CatInfo.Types.CatItemConfig> CatConfig {
      get { return catConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!catConfig_.Equals(other.catConfig_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= catConfig_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      catConfig_.WriteTo(output, _repeated_catConfig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += catConfig_.CalculateSize(_repeated_catConfig_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CatInfo other) {
      if (other == null) {
        return;
      }
      catConfig_.Add(other.catConfig_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            catConfig_.AddEntriesFrom(input, _repeated_catConfig_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CatInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CatItemConfig : pb::IMessage<CatItemConfig> {
        private static readonly pb::MessageParser<CatItemConfig> _parser = new pb::MessageParser<CatItemConfig>(() => new CatItemConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CatItemConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CatInfo.CatInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CatItemConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CatItemConfig(CatItemConfig other) : this() {
          id_ = other.id_;
          name_ = other.name_;
          type_ = other.type_;
          image_ = other.image_;
          property_ = other.property_.Clone();
          skill_ = other.skill_;
          description_ = other.description_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CatItemConfig Clone() {
          return new CatItemConfig(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private long id_;
        /// <summary>
        /// @name 猫咪id
        /// @key
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        /// @name 名称
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private string type_ = "";
        /// <summary>
        /// @name 品种
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type {
          get { return type_; }
          set {
            type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "image" field.</summary>
        public const int ImageFieldNumber = 4;
        private string image_ = "";
        /// <summary>
        /// @name 头像or形象
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Image {
          get { return image_; }
          set {
            image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "property" field.</summary>
        public const int PropertyFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_property_codec
            = pb::FieldCodec.ForInt32(42);
        private readonly pbc::RepeatedField<int> property_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// @name 能力参数(属性参数)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Property {
          get { return property_; }
        }

        /// <summary>Field number for the "skill" field.</summary>
        public const int SkillFieldNumber = 6;
        private long skill_;
        /// <summary>
        /// @name 技能
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Skill {
          get { return skill_; }
          set {
            skill_ = value;
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 7;
        private string description_ = "";
        /// <summary>
        /// @name 简介
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CatItemConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CatItemConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (Type != other.Type) return false;
          if (Image != other.Image) return false;
          if(!property_.Equals(other.property_)) return false;
          if (Skill != other.Skill) return false;
          if (Description != other.Description) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0L) hash ^= Id.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Type.Length != 0) hash ^= Type.GetHashCode();
          if (Image.Length != 0) hash ^= Image.GetHashCode();
          hash ^= property_.GetHashCode();
          if (Skill != 0L) hash ^= Skill.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Type.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Type);
          }
          if (Image.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Image);
          }
          property_.WriteTo(output, _repeated_property_codec);
          if (Skill != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(Skill);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(Description);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Type.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
          }
          if (Image.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
          }
          size += property_.CalculateSize(_repeated_property_codec);
          if (Skill != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Skill);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CatItemConfig other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0L) {
            Id = other.Id;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Type.Length != 0) {
            Type = other.Type;
          }
          if (other.Image.Length != 0) {
            Image = other.Image;
          }
          property_.Add(other.property_);
          if (other.Skill != 0L) {
            Skill = other.Skill;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt64();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Type = input.ReadString();
                break;
              }
              case 34: {
                Image = input.ReadString();
                break;
              }
              case 42:
              case 40: {
                property_.AddEntriesFrom(input, _repeated_property_codec);
                break;
              }
              case 48: {
                Skill = input.ReadInt64();
                break;
              }
              case 58: {
                Description = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
