// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/EventInfoConfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Event {

  /// <summary>Holder for reflection information generated from proto/EventInfoConfig.proto</summary>
  public static partial class EventInfoConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/EventInfoConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventInfoConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtwcm90by9FdmVudEluZm9Db25maWcucHJvdG8SBUV2ZW50IqkFCg9FdmVu",
            "dEluZm9Db25maWcSPAoMZXZlbnRfY29uZmlnGAEgAygLMiYuRXZlbnQuRXZl",
            "bnRJbmZvQ29uZmlnLkV2ZW50SXRlbUNvbmZpZxr9AwoPRXZlbnRJdGVtQ29u",
            "ZmlnEg8KB2V2ZW50SWQYASABKAMSDAoEbmFtZRgCIAEoCRIMCgR0eXBlGAMg",
            "ASgFEhMKC2NvbnN1bWVUaW1lGAUgASgDEhAKCGltYWdlb3V0GBMgASgJEg8K",
            "B2ltYWdlSW4YFCABKAkSEgoKZXhwaXJlVGltZRgGIAEoAxIZChFvdXRPZlRp",
            "bWVSZWNvcmRJZBgHIAEoAxIPCgdodW1hbklkGAggASgDEhIKCnJlcGVhdFRp",
            "bWUYCSABKAUSEwoLZW1lcmdlbmN5SWQYCiABKAMSEwoLaXNJbXBvcnRhbnQY",
            "CyABKAUSEAoIcHJpb3JpdHkYDCABKAUSFQoNcHJlY29uZGl0aW9ucxgNIAMo",
            "AxIPCgdlZmZlY3RzGA4gAygDEjIKBnJlc3VsdBgPIAMoCzIiLkV2ZW50LkV2",
            "ZW50SW5mb0NvbmZpZy5SZXN1bHRFdmVudBIUCgxleHBpcmVFZmZlY3QYECAD",
            "KAMSQQoSZ2VuZXJhdGVDb25kaXRpb25zGBEgAygLMiUuRXZlbnQuRXZlbnRJ",
            "bmZvQ29uZmlnLkNvbmRpdGlvbkdyb3VwEkAKEWRlc3Ryb3lDb25kaXRpb25z",
            "GBIgAygLMiUuRXZlbnQuRXZlbnRJbmZvQ29uZmlnLkNvbmRpdGlvbkdyb3Vw",
            "GjIKC1Jlc3VsdEV2ZW50Eg8KB2V2ZW50SWQYASABKAMSEgoKY29uZGl0aW9u",
            "cxgCIAMoAxokCg5Db25kaXRpb25Hcm91cBISCgpjb25kaXRpb25zGAEgAygD",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Event.EventInfoConfig), global::Event.EventInfoConfig.Parser, new[]{ "EventConfig" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Event.EventInfoConfig.Types.EventItemConfig), global::Event.EventInfoConfig.Types.EventItemConfig.Parser, new[]{ "EventId", "Name", "Type", "ConsumeTime", "Imageout", "ImageIn", "ExpireTime", "OutOfTimeRecordId", "HumanId", "RepeatTime", "EmergencyId", "IsImportant", "Priority", "Preconditions", "Effects", "Result", "ExpireEffect", "GenerateConditions", "DestroyConditions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Event.EventInfoConfig.Types.ResultEvent), global::Event.EventInfoConfig.Types.ResultEvent.Parser, new[]{ "EventId", "Conditions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Event.EventInfoConfig.Types.ConditionGroup), global::Event.EventInfoConfig.Types.ConditionGroup.Parser, new[]{ "Conditions" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// @wrapper 事件配置表(EventInfoConfig.pb.json)
  /// </summary>
  public sealed partial class EventInfoConfig : pb::IMessage<EventInfoConfig> {
    private static readonly pb::MessageParser<EventInfoConfig> _parser = new pb::MessageParser<EventInfoConfig>(() => new EventInfoConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventInfoConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Event.EventInfoConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventInfoConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventInfoConfig(EventInfoConfig other) : this() {
      eventConfig_ = other.eventConfig_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventInfoConfig Clone() {
      return new EventInfoConfig(this);
    }

    /// <summary>Field number for the "event_config" field.</summary>
    public const int EventConfigFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Event.EventInfoConfig.Types.EventItemConfig> _repeated_eventConfig_codec
        = pb::FieldCodec.ForMessage(10, global::Event.EventInfoConfig.Types.EventItemConfig.Parser);
    private readonly pbc::RepeatedField<global::Event.EventInfoConfig.Types.EventItemConfig> eventConfig_ = new pbc::RepeatedField<global::Event.EventInfoConfig.Types.EventItemConfig>();
    /// <summary>
    ///@name 事件配置表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Event.EventInfoConfig.Types.EventItemConfig> EventConfig {
      get { return eventConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventInfoConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventInfoConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!eventConfig_.Equals(other.eventConfig_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= eventConfig_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      eventConfig_.WriteTo(output, _repeated_eventConfig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventConfig_.CalculateSize(_repeated_eventConfig_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventInfoConfig other) {
      if (other == null) {
        return;
      }
      eventConfig_.Add(other.eventConfig_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventConfig_.AddEntriesFrom(input, _repeated_eventConfig_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EventInfoConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EventItemConfig : pb::IMessage<EventItemConfig> {
        private static readonly pb::MessageParser<EventItemConfig> _parser = new pb::MessageParser<EventItemConfig>(() => new EventItemConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EventItemConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Event.EventInfoConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventItemConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventItemConfig(EventItemConfig other) : this() {
          eventId_ = other.eventId_;
          name_ = other.name_;
          type_ = other.type_;
          consumeTime_ = other.consumeTime_;
          imageout_ = other.imageout_;
          imageIn_ = other.imageIn_;
          expireTime_ = other.expireTime_;
          outOfTimeRecordId_ = other.outOfTimeRecordId_;
          humanId_ = other.humanId_;
          repeatTime_ = other.repeatTime_;
          emergencyId_ = other.emergencyId_;
          isImportant_ = other.isImportant_;
          priority_ = other.priority_;
          preconditions_ = other.preconditions_.Clone();
          effects_ = other.effects_.Clone();
          result_ = other.result_.Clone();
          expireEffect_ = other.expireEffect_.Clone();
          generateConditions_ = other.generateConditions_.Clone();
          destroyConditions_ = other.destroyConditions_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventItemConfig Clone() {
          return new EventItemConfig(this);
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 1;
        private long eventId_;
        /// <summary>
        ///@name Id
        ///@key
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EventId {
          get { return eventId_; }
          set {
            eventId_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        ///@name 名称
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private int type_;
        /// <summary>
        ///@name 类型
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "consumeTime" field.</summary>
        public const int ConsumeTimeFieldNumber = 5;
        private long consumeTime_;
        /// <summary>
        ///@name 行动时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ConsumeTime {
          get { return consumeTime_; }
          set {
            consumeTime_ = value;
          }
        }

        /// <summary>Field number for the "imageout" field.</summary>
        public const int ImageoutFieldNumber = 19;
        private string imageout_ = "";
        /// <summary>
        ///@name 外部图片
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Imageout {
          get { return imageout_; }
          set {
            imageout_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "imageIn" field.</summary>
        public const int ImageInFieldNumber = 20;
        private string imageIn_ = "";
        /// <summary>
        ///@name 内部图片
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ImageIn {
          get { return imageIn_; }
          set {
            imageIn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expireTime" field.</summary>
        public const int ExpireTimeFieldNumber = 6;
        private long expireTime_;
        /// <summary>
        ///@name 销毁时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExpireTime {
          get { return expireTime_; }
          set {
            expireTime_ = value;
          }
        }

        /// <summary>Field number for the "outOfTimeRecordId" field.</summary>
        public const int OutOfTimeRecordIdFieldNumber = 7;
        private long outOfTimeRecordId_;
        /// <summary>
        ///@name 超时结果记录
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long OutOfTimeRecordId {
          get { return outOfTimeRecordId_; }
          set {
            outOfTimeRecordId_ = value;
          }
        }

        /// <summary>Field number for the "humanId" field.</summary>
        public const int HumanIdFieldNumber = 8;
        private long humanId_;
        /// <summary>
        ///@name 绑定人物
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long HumanId {
          get { return humanId_; }
          set {
            humanId_ = value;
          }
        }

        /// <summary>Field number for the "repeatTime" field.</summary>
        public const int RepeatTimeFieldNumber = 9;
        private int repeatTime_;
        /// <summary>
        ///@name 重复次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RepeatTime {
          get { return repeatTime_; }
          set {
            repeatTime_ = value;
          }
        }

        /// <summary>Field number for the "emergencyId" field.</summary>
        public const int EmergencyIdFieldNumber = 10;
        private long emergencyId_;
        /// <summary>
        ///@name 突发事件id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EmergencyId {
          get { return emergencyId_; }
          set {
            emergencyId_ = value;
          }
        }

        /// <summary>Field number for the "isImportant" field.</summary>
        public const int IsImportantFieldNumber = 11;
        private int isImportant_;
        /// <summary>
        ///@name 红点(是否重要)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int IsImportant {
          get { return isImportant_; }
          set {
            isImportant_ = value;
          }
        }

        /// <summary>Field number for the "priority" field.</summary>
        public const int PriorityFieldNumber = 12;
        private int priority_;
        /// <summary>
        ///@name 优先级(排序权重)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Priority {
          get { return priority_; }
          set {
            priority_ = value;
          }
        }

        /// <summary>Field number for the "preconditions" field.</summary>
        public const int PreconditionsFieldNumber = 13;
        private static readonly pb::FieldCodec<long> _repeated_preconditions_codec
            = pb::FieldCodec.ForInt64(106);
        private readonly pbc::RepeatedField<long> preconditions_ = new pbc::RepeatedField<long>();
        /// <summary>
        ///@name 前提条件
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Preconditions {
          get { return preconditions_; }
        }

        /// <summary>Field number for the "effects" field.</summary>
        public const int EffectsFieldNumber = 14;
        private static readonly pb::FieldCodec<long> _repeated_effects_codec
            = pb::FieldCodec.ForInt64(114);
        private readonly pbc::RepeatedField<long> effects_ = new pbc::RepeatedField<long>();
        /// <summary>
        ///@name 效果(代价)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Effects {
          get { return effects_; }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 15;
        private static readonly pb::FieldCodec<global::Event.EventInfoConfig.Types.ResultEvent> _repeated_result_codec
            = pb::FieldCodec.ForMessage(122, global::Event.EventInfoConfig.Types.ResultEvent.Parser);
        private readonly pbc::RepeatedField<global::Event.EventInfoConfig.Types.ResultEvent> result_ = new pbc::RepeatedField<global::Event.EventInfoConfig.Types.ResultEvent>();
        /// <summary>
        ///@name 结果
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Event.EventInfoConfig.Types.ResultEvent> Result {
          get { return result_; }
        }

        /// <summary>Field number for the "expireEffect" field.</summary>
        public const int ExpireEffectFieldNumber = 16;
        private static readonly pb::FieldCodec<long> _repeated_expireEffect_codec
            = pb::FieldCodec.ForInt64(130);
        private readonly pbc::RepeatedField<long> expireEffect_ = new pbc::RepeatedField<long>();
        /// <summary>
        ///@name 超时效果
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> ExpireEffect {
          get { return expireEffect_; }
        }

        /// <summary>Field number for the "generateConditions" field.</summary>
        public const int GenerateConditionsFieldNumber = 17;
        private static readonly pb::FieldCodec<global::Event.EventInfoConfig.Types.ConditionGroup> _repeated_generateConditions_codec
            = pb::FieldCodec.ForMessage(138, global::Event.EventInfoConfig.Types.ConditionGroup.Parser);
        private readonly pbc::RepeatedField<global::Event.EventInfoConfig.Types.ConditionGroup> generateConditions_ = new pbc::RepeatedField<global::Event.EventInfoConfig.Types.ConditionGroup>();
        /// <summary>
        ///@name 生成条件组
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Event.EventInfoConfig.Types.ConditionGroup> GenerateConditions {
          get { return generateConditions_; }
        }

        /// <summary>Field number for the "destroyConditions" field.</summary>
        public const int DestroyConditionsFieldNumber = 18;
        private static readonly pb::FieldCodec<global::Event.EventInfoConfig.Types.ConditionGroup> _repeated_destroyConditions_codec
            = pb::FieldCodec.ForMessage(146, global::Event.EventInfoConfig.Types.ConditionGroup.Parser);
        private readonly pbc::RepeatedField<global::Event.EventInfoConfig.Types.ConditionGroup> destroyConditions_ = new pbc::RepeatedField<global::Event.EventInfoConfig.Types.ConditionGroup>();
        /// <summary>
        ///@name 销毁条件组
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Event.EventInfoConfig.Types.ConditionGroup> DestroyConditions {
          get { return destroyConditions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EventItemConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EventItemConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EventId != other.EventId) return false;
          if (Name != other.Name) return false;
          if (Type != other.Type) return false;
          if (ConsumeTime != other.ConsumeTime) return false;
          if (Imageout != other.Imageout) return false;
          if (ImageIn != other.ImageIn) return false;
          if (ExpireTime != other.ExpireTime) return false;
          if (OutOfTimeRecordId != other.OutOfTimeRecordId) return false;
          if (HumanId != other.HumanId) return false;
          if (RepeatTime != other.RepeatTime) return false;
          if (EmergencyId != other.EmergencyId) return false;
          if (IsImportant != other.IsImportant) return false;
          if (Priority != other.Priority) return false;
          if(!preconditions_.Equals(other.preconditions_)) return false;
          if(!effects_.Equals(other.effects_)) return false;
          if(!result_.Equals(other.result_)) return false;
          if(!expireEffect_.Equals(other.expireEffect_)) return false;
          if(!generateConditions_.Equals(other.generateConditions_)) return false;
          if(!destroyConditions_.Equals(other.destroyConditions_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EventId != 0L) hash ^= EventId.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (ConsumeTime != 0L) hash ^= ConsumeTime.GetHashCode();
          if (Imageout.Length != 0) hash ^= Imageout.GetHashCode();
          if (ImageIn.Length != 0) hash ^= ImageIn.GetHashCode();
          if (ExpireTime != 0L) hash ^= ExpireTime.GetHashCode();
          if (OutOfTimeRecordId != 0L) hash ^= OutOfTimeRecordId.GetHashCode();
          if (HumanId != 0L) hash ^= HumanId.GetHashCode();
          if (RepeatTime != 0) hash ^= RepeatTime.GetHashCode();
          if (EmergencyId != 0L) hash ^= EmergencyId.GetHashCode();
          if (IsImportant != 0) hash ^= IsImportant.GetHashCode();
          if (Priority != 0) hash ^= Priority.GetHashCode();
          hash ^= preconditions_.GetHashCode();
          hash ^= effects_.GetHashCode();
          hash ^= result_.GetHashCode();
          hash ^= expireEffect_.GetHashCode();
          hash ^= generateConditions_.GetHashCode();
          hash ^= destroyConditions_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EventId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(EventId);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Type != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Type);
          }
          if (ConsumeTime != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(ConsumeTime);
          }
          if (ExpireTime != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(ExpireTime);
          }
          if (OutOfTimeRecordId != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(OutOfTimeRecordId);
          }
          if (HumanId != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(HumanId);
          }
          if (RepeatTime != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(RepeatTime);
          }
          if (EmergencyId != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(EmergencyId);
          }
          if (IsImportant != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(IsImportant);
          }
          if (Priority != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(Priority);
          }
          preconditions_.WriteTo(output, _repeated_preconditions_codec);
          effects_.WriteTo(output, _repeated_effects_codec);
          result_.WriteTo(output, _repeated_result_codec);
          expireEffect_.WriteTo(output, _repeated_expireEffect_codec);
          generateConditions_.WriteTo(output, _repeated_generateConditions_codec);
          destroyConditions_.WriteTo(output, _repeated_destroyConditions_codec);
          if (Imageout.Length != 0) {
            output.WriteRawTag(154, 1);
            output.WriteString(Imageout);
          }
          if (ImageIn.Length != 0) {
            output.WriteRawTag(162, 1);
            output.WriteString(ImageIn);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EventId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventId);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (ConsumeTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConsumeTime);
          }
          if (Imageout.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(Imageout);
          }
          if (ImageIn.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ImageIn);
          }
          if (ExpireTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
          }
          if (OutOfTimeRecordId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(OutOfTimeRecordId);
          }
          if (HumanId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(HumanId);
          }
          if (RepeatTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepeatTime);
          }
          if (EmergencyId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EmergencyId);
          }
          if (IsImportant != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsImportant);
          }
          if (Priority != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
          }
          size += preconditions_.CalculateSize(_repeated_preconditions_codec);
          size += effects_.CalculateSize(_repeated_effects_codec);
          size += result_.CalculateSize(_repeated_result_codec);
          size += expireEffect_.CalculateSize(_repeated_expireEffect_codec);
          size += generateConditions_.CalculateSize(_repeated_generateConditions_codec);
          size += destroyConditions_.CalculateSize(_repeated_destroyConditions_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EventItemConfig other) {
          if (other == null) {
            return;
          }
          if (other.EventId != 0L) {
            EventId = other.EventId;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.ConsumeTime != 0L) {
            ConsumeTime = other.ConsumeTime;
          }
          if (other.Imageout.Length != 0) {
            Imageout = other.Imageout;
          }
          if (other.ImageIn.Length != 0) {
            ImageIn = other.ImageIn;
          }
          if (other.ExpireTime != 0L) {
            ExpireTime = other.ExpireTime;
          }
          if (other.OutOfTimeRecordId != 0L) {
            OutOfTimeRecordId = other.OutOfTimeRecordId;
          }
          if (other.HumanId != 0L) {
            HumanId = other.HumanId;
          }
          if (other.RepeatTime != 0) {
            RepeatTime = other.RepeatTime;
          }
          if (other.EmergencyId != 0L) {
            EmergencyId = other.EmergencyId;
          }
          if (other.IsImportant != 0) {
            IsImportant = other.IsImportant;
          }
          if (other.Priority != 0) {
            Priority = other.Priority;
          }
          preconditions_.Add(other.preconditions_);
          effects_.Add(other.effects_);
          result_.Add(other.result_);
          expireEffect_.Add(other.expireEffect_);
          generateConditions_.Add(other.generateConditions_);
          destroyConditions_.Add(other.destroyConditions_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                EventId = input.ReadInt64();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                Type = input.ReadInt32();
                break;
              }
              case 40: {
                ConsumeTime = input.ReadInt64();
                break;
              }
              case 48: {
                ExpireTime = input.ReadInt64();
                break;
              }
              case 56: {
                OutOfTimeRecordId = input.ReadInt64();
                break;
              }
              case 64: {
                HumanId = input.ReadInt64();
                break;
              }
              case 72: {
                RepeatTime = input.ReadInt32();
                break;
              }
              case 80: {
                EmergencyId = input.ReadInt64();
                break;
              }
              case 88: {
                IsImportant = input.ReadInt32();
                break;
              }
              case 96: {
                Priority = input.ReadInt32();
                break;
              }
              case 106:
              case 104: {
                preconditions_.AddEntriesFrom(input, _repeated_preconditions_codec);
                break;
              }
              case 114:
              case 112: {
                effects_.AddEntriesFrom(input, _repeated_effects_codec);
                break;
              }
              case 122: {
                result_.AddEntriesFrom(input, _repeated_result_codec);
                break;
              }
              case 130:
              case 128: {
                expireEffect_.AddEntriesFrom(input, _repeated_expireEffect_codec);
                break;
              }
              case 138: {
                generateConditions_.AddEntriesFrom(input, _repeated_generateConditions_codec);
                break;
              }
              case 146: {
                destroyConditions_.AddEntriesFrom(input, _repeated_destroyConditions_codec);
                break;
              }
              case 154: {
                Imageout = input.ReadString();
                break;
              }
              case 162: {
                ImageIn = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ResultEvent : pb::IMessage<ResultEvent> {
        private static readonly pb::MessageParser<ResultEvent> _parser = new pb::MessageParser<ResultEvent>(() => new ResultEvent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResultEvent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Event.EventInfoConfig.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultEvent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultEvent(ResultEvent other) : this() {
          eventId_ = other.eventId_;
          conditions_ = other.conditions_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultEvent Clone() {
          return new ResultEvent(this);
        }

        /// <summary>Field number for the "eventId" field.</summary>
        public const int EventIdFieldNumber = 1;
        private long eventId_;
        /// <summary>
        ///@name id
        ///@key
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EventId {
          get { return eventId_; }
          set {
            eventId_ = value;
          }
        }

        /// <summary>Field number for the "conditions" field.</summary>
        public const int ConditionsFieldNumber = 2;
        private static readonly pb::FieldCodec<long> _repeated_conditions_codec
            = pb::FieldCodec.ForInt64(18);
        private readonly pbc::RepeatedField<long> conditions_ = new pbc::RepeatedField<long>();
        /// <summary>
        ///@name 条件
        ///@style inline
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Conditions {
          get { return conditions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ResultEvent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResultEvent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EventId != other.EventId) return false;
          if(!conditions_.Equals(other.conditions_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EventId != 0L) hash ^= EventId.GetHashCode();
          hash ^= conditions_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EventId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(EventId);
          }
          conditions_.WriteTo(output, _repeated_conditions_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EventId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventId);
          }
          size += conditions_.CalculateSize(_repeated_conditions_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResultEvent other) {
          if (other == null) {
            return;
          }
          if (other.EventId != 0L) {
            EventId = other.EventId;
          }
          conditions_.Add(other.conditions_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                EventId = input.ReadInt64();
                break;
              }
              case 18:
              case 16: {
                conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ConditionGroup : pb::IMessage<ConditionGroup> {
        private static readonly pb::MessageParser<ConditionGroup> _parser = new pb::MessageParser<ConditionGroup>(() => new ConditionGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConditionGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Event.EventInfoConfig.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConditionGroup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConditionGroup(ConditionGroup other) : this() {
          conditions_ = other.conditions_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConditionGroup Clone() {
          return new ConditionGroup(this);
        }

        /// <summary>Field number for the "conditions" field.</summary>
        public const int ConditionsFieldNumber = 1;
        private static readonly pb::FieldCodec<long> _repeated_conditions_codec
            = pb::FieldCodec.ForInt64(10);
        private readonly pbc::RepeatedField<long> conditions_ = new pbc::RepeatedField<long>();
        /// <summary>
        ///@style inline
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Conditions {
          get { return conditions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConditionGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConditionGroup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!conditions_.Equals(other.conditions_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= conditions_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          conditions_.WriteTo(output, _repeated_conditions_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += conditions_.CalculateSize(_repeated_conditions_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConditionGroup other) {
          if (other == null) {
            return;
          }
          conditions_.Add(other.conditions_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
